import prisma from "../utils/prisma.js";
import * as cache from "../utils/cache.js";

// Cache TTLs
const CACHE_TTL = {
  LIST: 5 * 60 * 1000, // 5 minutes for lists
  DETAIL: 10 * 60 * 1000, // 10 minutes for details
};

export async function getAll() {
  // Include year in cache key since results depend on current year
  let year = new Date().getFullYear();
  const month = new Date().getMonth();

  if (month < 6) {
    year -= 1;
  }

  const cacheKey = `tanulo_letszam:all:${year}`;
  const cachedData = cache.get(cacheKey);

  if (cachedData) {
    return cachedData;
  }

  const data = await prisma.tanulo_Letszam.findMany({
    where: {
      AND: {
        tanev_kezdete: { lte: year },
        tanev_kezdete: { gte: year - 4 },
      },
    },
  });

  // Store in cache
  cache.set(cacheKey, data, CACHE_TTL.LIST);

  return data;
}

export async function getById(id) {
  let year = new Date().getFullYear();
  const month = new Date().getMonth();

  if (month < 6) {
    year -= 1;
  }

  const cacheKey = `tanulo_letszam:id:${id}:year:${year}`;
  const cachedData = cache.get(cacheKey);

  if (cachedData) {
    return cachedData;
  }

  const data = await prisma.tanulo_Letszam.findMany({
    where: {
      AND: {
        tanev_kezdete: { lte: year },
        tanev_kezdete: { gte: year - 4 },
        alapadatok_id: id,
      },
    },
    include: {
      szakirany: true,
      szakma: true,
    },
  });

  // Store in cache
  cache.set(cacheKey, data, CACHE_TTL.DETAIL);

  return data;
}

export async function create(
  letszam,
  alapadatok_id,
  jogv_tipus,
  szakirany,
  szakma,
  tanev_kezdete
) {
  // Invalidate cache for this alapadatok and the main list
  cache.delByPattern(`tanulo_letszam:all:.*`); // Clear all year variations
  cache.delByPattern(`tanulo_letszam:id:${alapadatok_id}:.*`); // Clear all year variations
  cache.delByPattern(
    `tanulo_letszam:id:${alapadatok_id}:year:${tanev_kezdete}`
  ); // Clear all year variations

  let ret;

  if (szakma && szakma !== "Nincs meghatározva") {
    ret = await prisma.tanulo_Letszam.create({
      data: {
        tanev_kezdete: Number(tanev_kezdete),
        szakirany: { connect: { nev: szakirany } },
        szakma: { connect: { nev: szakma } },
        alapadatok: { connect: { id: alapadatok_id } },
        jogv_tipus: Number(jogv_tipus),
        letszam: Number(letszam),
      },
    });
  } else {
    ret = await prisma.tanulo_Letszam.create({
      data: {
        tanev_kezdete: Number(tanev_kezdete),
        szakirany: { connect: { nev: szakirany } },
        alapadatok: { connect: { id: alapadatok_id } },
        jogv_tipus: Number(jogv_tipus),
        letszam: Number(letszam),
      },
    });
  }

  return ret;
}

export async function update(
  id,
  letszam,
  alapadatok_id,
  jogv_tipus,
  szakirany,
  szakma,
  tanev_kezdete
) {
  // Invalidate cache for this alapadatok and the main list
  cache.delByPattern(`tanulo_letszam:all:.*`); // Clear all year variations
  cache.delByPattern(`tanulo_letszam:id:${alapadatok_id}:.*`); // Clear all year variations
  cache.delByPattern(
    `tanulo_letszam:id:${alapadatok_id}:year:${tanev_kezdete}`
  ); // Clear all year variations

  let ret;

  if (szakma && szakma !== "Nincs meghatározva") {
    ret = await prisma.tanulo_Letszam.update({
      where: { id: id },
      data: {
        letszam: Number(letszam),
        alapadatok: { connect: { id: alapadatok_id } },
        jogv_tipus: Number(jogv_tipus),
        szakirany: { connect: { nev: szakirany } },
        szakma: { connect: { nev: szakma } },
        tanev_kezdete: Number(tanev_kezdete),
      },
    });
  } else {
    ret = await prisma.tanulo_Letszam.update({
      where: { id: id },
      data: {
        letszam: Number(letszam),
        alapadatok: { connect: { id: alapadatok_id } },
        jogv_tipus: Number(jogv_tipus),
        szakirany: { connect: { nev: szakirany } },
        tanev_kezdete: Number(tanev_kezdete),
      },
    });
  }

  return ret;
}

export async function deleteMany(alapadatok_id, year) {
  // Invalidate cache for this alapadatok and the main list
  cache.delByPattern(`tanulo_letszam:all:.*`); // Clear all year variations
  cache.delByPattern(`tanulo_letszam:id:${alapadatok_id}:.*`); // Clear all year variations
  cache.delByPattern(
    `tanulo_letszam:id:${alapadatok_id}:year:${tanev_kezdete}`
  ); // Clear all year variations

  const ret = await prisma.tanulo_Letszam.deleteMany({
    where: {
      alapadatok_id,
      tanev_kezdete: Number(year),
    },
  });

  return ret;
}